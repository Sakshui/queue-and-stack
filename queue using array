class ArrayQueue {
    private int[] queue;
    private int front, rear, capacity, size;

    public ArrayQueue(int capacity) {
        this.capacity = capacity;
        queue = new int[capacity];
        front = 0;
        rear = -1;
        size = 0;
    }

    // Add an item to the queue
    public void enqueue(int item) {
        if (size == capacity) {
            System.out.println("Queue is full");
            return;
        }
        rear = (rear + 1) % capacity;
        queue[rear] = item;
        size++;
    }

    // Remove and return the front item from the queue
    public int dequeue() {
        if (size == 0) {
            System.out.println("Queue is empty");
            return -1; // Or throw an exception
        }
        int item = queue[front];
        front = (front + 1) % capacity;
        size--;
        return item;
    }

    // Return the front item without removing it
    public int peek() {
        if (size == 0) {
            System.out.println("Queue is empty");
            return -1; // Or throw an exception
        }
        return queue[front];
    }

    // Check if the queue is empty
    public boolean isEmpty() {
        return size == 0;
    }

    // Get the size of the queue
    public int size() {
        return size;
    }
}

// Example usage
public class Main {
    public static void main(String[] args) {
        ArrayQueue queue = new ArrayQueue(5);

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);

        System.out.println("Front item: " + queue.peek());
        System.out.println("Dequeued: " + queue.dequeue());
        System.out.println("New front item: " + queue.peek());
        System.out.println("Queue size: " + queue.size());
    }
}
